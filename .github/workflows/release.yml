name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type check
        run: npm run build

  create-release:
    needs: test
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '"version"' package.json | cut -d '"' -f 4)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
      
      - name: Determine version bump
        id: version_bump
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          
          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Determine version bump based on commit message
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
            # Major version bump (breaking change)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            BUMP_TYPE="major"
          elif [[ "$COMMIT_MSG" == feat:* ]] || [[ "$COMMIT_MSG" == feature:* ]]; then
            # Minor version bump (new feature)
            MINOR=$((MINOR + 1))
            PATCH=0
            BUMP_TYPE="minor"
          else
            # Patch version bump (fixes, chores, etc.)
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch"
          fi
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump: $CURRENT_VERSION -> $NEW_VERSION ($BUMP_TYPE)"
      
      - name: Update version in files
        run: |
          # Update package.json
          sed -i 's/"version": ".*"/"version": "${{ steps.version_bump.outputs.new_version }}"/' package.json
          
          # Update Cargo.toml
          sed -i 's/^version = ".*"/version = "${{ steps.version_bump.outputs.new_version }}"/' src-tauri/Cargo.toml
          
          # Update tauri.conf.json
          sed -i 's/"version": ".*"/"version": "${{ steps.version_bump.outputs.new_version }}"/' src-tauri/tauri.conf.json
          
          # Commit version bump
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json src-tauri/Cargo.toml src-tauri/tauri.conf.json
          git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new_version }}"
          git push
      
      - name: Generate version
        id: version
        run: |
          VERSION="v${{ steps.version_bump.outputs.new_version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
      
      - name: Create tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.version }}
      
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Clipedia ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # Clipedia ${{ steps.version.outputs.version }}
            
            エレガントなクリップボード管理ツール
            
            ## 最新の変更
            - 🎯 Alt+Z グローバルホットキーでクイックアクセス
            - 🎨 新しいミニマルデザイン
            - 🌓 ダークモード/ライトモード切り替え
            - 📌 改善されたピン留め機能
            - 🔍 高度な検索とフィルタリング
            
            ## ダウンロード
            お使いのプラットフォームに合わせてダウンロードしてください：
            - **Windows**: `Clipedia_*_x64-setup.exe` または `.msi`
            - **macOS**: `Clipedia_*_universal.dmg`
            - **Linux**: `clipedia_*_amd64.AppImage` または `.deb`
            
            ## コミット履歴
            ${{ github.event.head_commit.message }}

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Build and release Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    
    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.RELEASE_ID,
              draft: false,
              prerelease: false
            })